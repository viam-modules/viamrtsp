// @generated by protoc-gen-es v1.10.0
// @generated from file src/proto/videostore.proto (package viammodules.service.videostore.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message viammodules.service.videostore.v1.FetchStreamRequest
 */
export declare class FetchStreamRequest extends Message<FetchStreamRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string from = 2;
   */
  from: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string to = 3;
   */
  to: string;

  constructor(data?: PartialMessage<FetchStreamRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.FetchStreamRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchStreamRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchStreamRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchStreamRequest;

  static equals(a: FetchStreamRequest | PlainMessage<FetchStreamRequest> | undefined, b: FetchStreamRequest | PlainMessage<FetchStreamRequest> | undefined): boolean;
}

/**
 * @generated from message viammodules.service.videostore.v1.FetchStreamResponse
 */
export declare class FetchStreamResponse extends Message<FetchStreamResponse> {
  /**
   * @generated from field: bytes video_data = 1;
   */
  videoData: Uint8Array;

  constructor(data?: PartialMessage<FetchStreamResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.FetchStreamResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchStreamResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchStreamResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchStreamResponse;

  static equals(a: FetchStreamResponse | PlainMessage<FetchStreamResponse> | undefined, b: FetchStreamResponse | PlainMessage<FetchStreamResponse> | undefined): boolean;
}

/**
 * @generated from message viammodules.service.videostore.v1.FetchRequest
 */
export declare class FetchRequest extends Message<FetchRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string from = 2;
   */
  from: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string to = 3;
   */
  to: string;

  constructor(data?: PartialMessage<FetchRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.FetchRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchRequest;

  static equals(a: FetchRequest | PlainMessage<FetchRequest> | undefined, b: FetchRequest | PlainMessage<FetchRequest> | undefined): boolean;
}

/**
 * @generated from message viammodules.service.videostore.v1.FetchResponse
 */
export declare class FetchResponse extends Message<FetchResponse> {
  /**
   * Raw video bytes for the requested interval
   *
   * @generated from field: bytes video_data = 1;
   */
  videoData: Uint8Array;

  constructor(data?: PartialMessage<FetchResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.FetchResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetchResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetchResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetchResponse;

  static equals(a: FetchResponse | PlainMessage<FetchResponse> | undefined, b: FetchResponse | PlainMessage<FetchResponse> | undefined): boolean;
}

/**
 * @generated from message viammodules.service.videostore.v1.SaveRequest
 */
export declare class SaveRequest extends Message<SaveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string from = 2;
   */
  from: string;

  /**
   * Date-time in format YYYY-MM-DD_HH-MM-SS
   *
   * @generated from field: string to = 3;
   */
  to: string;

  constructor(data?: PartialMessage<SaveRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.SaveRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveRequest;

  static equals(a: SaveRequest | PlainMessage<SaveRequest> | undefined, b: SaveRequest | PlainMessage<SaveRequest> | undefined): boolean;
}

/**
 * @generated from message viammodules.service.videostore.v1.SaveResponse
 */
export declare class SaveResponse extends Message<SaveResponse> {
  /**
   * Filename (or identifier) of the saved artifact
   *
   * @generated from field: string filename = 1;
   */
  filename: string;

  constructor(data?: PartialMessage<SaveResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "viammodules.service.videostore.v1.SaveResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaveResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaveResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaveResponse;

  static equals(a: SaveResponse | PlainMessage<SaveResponse> | undefined, b: SaveResponse | PlainMessage<SaveResponse> | undefined): boolean;
}

