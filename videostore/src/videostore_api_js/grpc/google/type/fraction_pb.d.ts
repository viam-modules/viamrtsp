// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file google/type/fraction.proto (package google.type, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Represents a fraction in terms of a numerator divided by a denominator.
 *
 * @generated from message google.type.Fraction
 */
export declare class Fraction extends Message<Fraction> {
  /**
   * The numerator in the fraction, e.g. 2 in 2/3.
   *
   * @generated from field: int64 numerator = 1;
   */
  numerator: bigint;

  /**
   * The value by which the numerator is divided, e.g. 3 in 2/3. Must be
   * positive.
   *
   * @generated from field: int64 denominator = 2;
   */
  denominator: bigint;

  constructor(data?: PartialMessage<Fraction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "google.type.Fraction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fraction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fraction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fraction;

  static equals(a: Fraction | PlainMessage<Fraction> | undefined, b: Fraction | PlainMessage<Fraction> | undefined): boolean;
}

