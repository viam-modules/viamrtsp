// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file google/api/resource.proto (package google.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { FieldOptions, FileOptions, MessageOptions, proto3 } from "@bufbuild/protobuf";

/**
 * A simple descriptor of a resource type.
 *
 * ResourceDescriptor annotates a resource message (either by means of a
 * protobuf annotation or use in the service config), and associates the
 * resource's schema, the resource type, and the pattern of the resource name.
 *
 * Example:
 *
 *     message Topic {
 *       // Indicates this message defines a resource schema.
 *       // Declares the resource type in the format of {service}/{kind}.
 *       // For Kubernetes resources, the format is {api group}/{kind}.
 *       option (google.api.resource) = {
 *         type: "pubsub.googleapis.com/Topic"
 *         pattern: "projects/{project}/topics/{topic}"
 *       };
 *     }
 *
 * The ResourceDescriptor Yaml config will look like:
 *
 *     resources:
 *     - type: "pubsub.googleapis.com/Topic"
 *       pattern: "projects/{project}/topics/{topic}"
 *
 * Sometimes, resources have multiple patterns, typically because they can
 * live under multiple parents.
 *
 * Example:
 *
 *     message LogEntry {
 *       option (google.api.resource) = {
 *         type: "logging.googleapis.com/LogEntry"
 *         pattern: "projects/{project}/logs/{log}"
 *         pattern: "folders/{folder}/logs/{log}"
 *         pattern: "organizations/{organization}/logs/{log}"
 *         pattern: "billingAccounts/{billing_account}/logs/{log}"
 *       };
 *     }
 *
 * The ResourceDescriptor Yaml config will look like:
 *
 *     resources:
 *     - type: 'logging.googleapis.com/LogEntry'
 *       pattern: "projects/{project}/logs/{log}"
 *       pattern: "folders/{folder}/logs/{log}"
 *       pattern: "organizations/{organization}/logs/{log}"
 *       pattern: "billingAccounts/{billing_account}/logs/{log}"
 *
 * @generated from message google.api.ResourceDescriptor
 */
export const ResourceDescriptor = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.ResourceDescriptor",
  () => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pattern", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "name_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "history", kind: "enum", T: proto3.getEnumType(ResourceDescriptor_History) },
    { no: 5, name: "plural", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "singular", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "style", kind: "enum", T: proto3.getEnumType(ResourceDescriptor_Style), repeated: true },
  ],
);

/**
 * A description of the historical or future-looking state of the
 * resource pattern.
 *
 * @generated from enum google.api.ResourceDescriptor.History
 */
export const ResourceDescriptor_History = /*@__PURE__*/ proto3.makeEnum(
  "google.api.ResourceDescriptor.History",
  [
    {no: 0, name: "HISTORY_UNSPECIFIED"},
    {no: 1, name: "ORIGINALLY_SINGLE_PATTERN"},
    {no: 2, name: "FUTURE_MULTI_PATTERN"},
  ],
);

/**
 * A flag representing a specific style that a resource claims to conform to.
 *
 * @generated from enum google.api.ResourceDescriptor.Style
 */
export const ResourceDescriptor_Style = /*@__PURE__*/ proto3.makeEnum(
  "google.api.ResourceDescriptor.Style",
  [
    {no: 0, name: "STYLE_UNSPECIFIED"},
    {no: 1, name: "DECLARATIVE_FRIENDLY"},
  ],
);

/**
 * Defines a proto annotation that describes a string field that refers to
 * an API resource.
 *
 * @generated from message google.api.ResourceReference
 */
export const ResourceReference = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.ResourceReference",
  () => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "child_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * An annotation that describes a resource reference, see
 * [ResourceReference][].
 *
 * @generated from extension: google.api.ResourceReference resource_reference = 1055;
 */
export const resource_reference = proto3.makeExtension(
  "google.api.resource_reference", 
  FieldOptions, 
  () => ({ no: 1055, kind: "message", T: ResourceReference }),
);

/**
 * An annotation that describes a resource definition without a corresponding
 * message; see [ResourceDescriptor][].
 *
 * @generated from extension: repeated google.api.ResourceDescriptor resource_definition = 1053;
 */
export const resource_definition = proto3.makeExtension(
  "google.api.resource_definition", 
  FileOptions, 
  () => ({ no: 1053, kind: "message", T: ResourceDescriptor, repeated: true }),
);

/**
 * An annotation that describes a resource definition, see
 * [ResourceDescriptor][].
 *
 * @generated from extension: google.api.ResourceDescriptor resource = 1053;
 */
export const resource = proto3.makeExtension(
  "google.api.resource", 
  MessageOptions, 
  () => ({ no: 1053, kind: "message", T: ResourceDescriptor }),
);

