// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file google/api/expr/v1alpha1/checked.proto (package google.api.expr.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Empty, NullValue, proto3 } from "@bufbuild/protobuf";
import { Constant, Expr, SourceInfo } from "./syntax_pb.js";

/**
 * A CEL expression which has been successfully type checked.
 *
 * @generated from message google.api.expr.v1alpha1.CheckedExpr
 */
export const CheckedExpr = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.CheckedExpr",
  () => [
    { no: 2, name: "reference_map", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: Reference} },
    { no: 3, name: "type_map", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: Type} },
    { no: 5, name: "source_info", kind: "message", T: SourceInfo },
    { no: 6, name: "expr_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expr", kind: "message", T: Expr },
  ],
);

/**
 * Represents a CEL type.
 *
 * @generated from message google.api.expr.v1alpha1.Type
 */
export const Type = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Type",
  () => [
    { no: 1, name: "dyn", kind: "message", T: Empty, oneof: "type_kind" },
    { no: 2, name: "null", kind: "enum", T: proto3.getEnumType(NullValue), oneof: "type_kind" },
    { no: 3, name: "primitive", kind: "enum", T: proto3.getEnumType(Type_PrimitiveType), oneof: "type_kind" },
    { no: 4, name: "wrapper", kind: "enum", T: proto3.getEnumType(Type_PrimitiveType), oneof: "type_kind" },
    { no: 5, name: "well_known", kind: "enum", T: proto3.getEnumType(Type_WellKnownType), oneof: "type_kind" },
    { no: 6, name: "list_type", kind: "message", T: Type_ListType, oneof: "type_kind" },
    { no: 7, name: "map_type", kind: "message", T: Type_MapType, oneof: "type_kind" },
    { no: 8, name: "function", kind: "message", T: Type_FunctionType, oneof: "type_kind" },
    { no: 9, name: "message_type", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type_kind" },
    { no: 10, name: "type_param", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "type_kind" },
    { no: 11, name: "type", kind: "message", T: Type, oneof: "type_kind" },
    { no: 12, name: "error", kind: "message", T: Empty, oneof: "type_kind" },
    { no: 14, name: "abstract_type", kind: "message", T: Type_AbstractType, oneof: "type_kind" },
  ],
);

/**
 * CEL primitive types.
 *
 * @generated from enum google.api.expr.v1alpha1.Type.PrimitiveType
 */
export const Type_PrimitiveType = /*@__PURE__*/ proto3.makeEnum(
  "google.api.expr.v1alpha1.Type.PrimitiveType",
  [
    {no: 0, name: "PRIMITIVE_TYPE_UNSPECIFIED"},
    {no: 1, name: "BOOL"},
    {no: 2, name: "INT64"},
    {no: 3, name: "UINT64"},
    {no: 4, name: "DOUBLE"},
    {no: 5, name: "STRING"},
    {no: 6, name: "BYTES"},
  ],
);

/**
 * Well-known protobuf types treated with first-class support in CEL.
 *
 * @generated from enum google.api.expr.v1alpha1.Type.WellKnownType
 */
export const Type_WellKnownType = /*@__PURE__*/ proto3.makeEnum(
  "google.api.expr.v1alpha1.Type.WellKnownType",
  [
    {no: 0, name: "WELL_KNOWN_TYPE_UNSPECIFIED"},
    {no: 1, name: "ANY"},
    {no: 2, name: "TIMESTAMP"},
    {no: 3, name: "DURATION"},
  ],
);

/**
 * List type with typed elements, e.g. `list<example.proto.MyMessage>`.
 *
 * @generated from message google.api.expr.v1alpha1.Type.ListType
 */
export const Type_ListType = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Type.ListType",
  () => [
    { no: 1, name: "elem_type", kind: "message", T: Type },
  ],
  {localName: "Type_ListType"},
);

/**
 * Map type with parameterized key and value types, e.g. `map<string, int>`.
 *
 * @generated from message google.api.expr.v1alpha1.Type.MapType
 */
export const Type_MapType = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Type.MapType",
  () => [
    { no: 1, name: "key_type", kind: "message", T: Type },
    { no: 2, name: "value_type", kind: "message", T: Type },
  ],
  {localName: "Type_MapType"},
);

/**
 * Function type with result and arg types.
 *
 * @generated from message google.api.expr.v1alpha1.Type.FunctionType
 */
export const Type_FunctionType = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Type.FunctionType",
  () => [
    { no: 1, name: "result_type", kind: "message", T: Type },
    { no: 2, name: "arg_types", kind: "message", T: Type, repeated: true },
  ],
  {localName: "Type_FunctionType"},
);

/**
 * Application defined abstract type.
 *
 * @generated from message google.api.expr.v1alpha1.Type.AbstractType
 */
export const Type_AbstractType = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Type.AbstractType",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "parameter_types", kind: "message", T: Type, repeated: true },
  ],
  {localName: "Type_AbstractType"},
);

/**
 * Represents a declaration of a named value or function.
 *
 * A declaration is part of the contract between the expression, the agent
 * evaluating that expression, and the caller requesting evaluation.
 *
 * @generated from message google.api.expr.v1alpha1.Decl
 */
export const Decl = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Decl",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ident", kind: "message", T: Decl_IdentDecl, oneof: "decl_kind" },
    { no: 3, name: "function", kind: "message", T: Decl_FunctionDecl, oneof: "decl_kind" },
  ],
);

/**
 * Identifier declaration which specifies its type and optional `Expr` value.
 *
 * An identifier without a value is a declaration that must be provided at
 * evaluation time. An identifier with a value should resolve to a constant,
 * but may be used in conjunction with other identifiers bound at evaluation
 * time.
 *
 * @generated from message google.api.expr.v1alpha1.Decl.IdentDecl
 */
export const Decl_IdentDecl = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Decl.IdentDecl",
  () => [
    { no: 1, name: "type", kind: "message", T: Type },
    { no: 2, name: "value", kind: "message", T: Constant },
    { no: 3, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Decl_IdentDecl"},
);

/**
 * Function declaration specifies one or more overloads which indicate the
 * function's parameter types and return type.
 *
 * Functions have no observable side-effects (there may be side-effects like
 * logging which are not observable from CEL).
 *
 * @generated from message google.api.expr.v1alpha1.Decl.FunctionDecl
 */
export const Decl_FunctionDecl = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Decl.FunctionDecl",
  () => [
    { no: 1, name: "overloads", kind: "message", T: Decl_FunctionDecl_Overload, repeated: true },
  ],
  {localName: "Decl_FunctionDecl"},
);

/**
 * An overload indicates a function's parameter types and return type, and
 * may optionally include a function body described in terms of
 * [Expr][google.api.expr.v1alpha1.Expr] values.
 *
 * Functions overloads are declared in either a function or method
 * call-style. For methods, the `params[0]` is the expected type of the
 * target receiver.
 *
 * Overloads must have non-overlapping argument types after erasure of all
 * parameterized type variables (similar as type erasure in Java).
 *
 * @generated from message google.api.expr.v1alpha1.Decl.FunctionDecl.Overload
 */
export const Decl_FunctionDecl_Overload = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload",
  () => [
    { no: 1, name: "overload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Type, repeated: true },
    { no: 3, name: "type_params", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "result_type", kind: "message", T: Type },
    { no: 5, name: "is_instance_function", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "doc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Decl_FunctionDecl_Overload"},
);

/**
 * Describes a resolved reference to a declaration.
 *
 * @generated from message google.api.expr.v1alpha1.Reference
 */
export const Reference = /*@__PURE__*/ proto3.makeMessageType(
  "google.api.expr.v1alpha1.Reference",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "overload_id", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "value", kind: "message", T: Constant },
  ],
);

