// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file google/rpc/error_details.proto (package google.rpc, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Duration, proto3 } from "@bufbuild/protobuf";

/**
 * Describes the cause of the error with structured details.
 *
 * Example of an error when contacting the "pubsub.googleapis.com" API when it
 * is not enabled:
 *
 *     { "reason": "API_DISABLED"
 *       "domain": "googleapis.com"
 *       "metadata": {
 *         "resource": "projects/123",
 *         "service": "pubsub.googleapis.com"
 *       }
 *     }
 *
 * This response indicates that the pubsub.googleapis.com API is not enabled.
 *
 * Example of an error that is returned when attempting to create a Spanner
 * instance in a region that is out of stock:
 *
 *     { "reason": "STOCKOUT"
 *       "domain": "spanner.googleapis.com",
 *       "metadata": {
 *         "availableRegions": "us-central1,us-east2"
 *       }
 *     }
 *
 * @generated from message google.rpc.ErrorInfo
 */
export const ErrorInfo = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.ErrorInfo",
  () => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Describes when the clients can retry a failed request. Clients could ignore
 * the recommendation here or retry when this information is missing from error
 * responses.
 *
 * It's always recommended that clients should use exponential backoff when
 * retrying.
 *
 * Clients should wait until `retry_delay` amount of time has passed since
 * receiving the error response before retrying.  If retrying requests also
 * fail, clients should use an exponential backoff scheme to gradually increase
 * the delay between retries based on `retry_delay`, until either a maximum
 * number of retries have been reached or a maximum retry delay cap has been
 * reached.
 *
 * @generated from message google.rpc.RetryInfo
 */
export const RetryInfo = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.RetryInfo",
  () => [
    { no: 1, name: "retry_delay", kind: "message", T: Duration },
  ],
);

/**
 * Describes additional debugging info.
 *
 * @generated from message google.rpc.DebugInfo
 */
export const DebugInfo = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.DebugInfo",
  () => [
    { no: 1, name: "stack_entries", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "detail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Describes how a quota check failed.
 *
 * For example if a daily limit was exceeded for the calling project,
 * a service could respond with a QuotaFailure detail containing the project
 * id and the description of the quota limit that was exceeded.  If the
 * calling project hasn't enabled the service in the developer console, then
 * a service could respond with the project id and set `service_disabled`
 * to true.
 *
 * Also see RetryInfo and Help types for other details about handling a
 * quota failure.
 *
 * @generated from message google.rpc.QuotaFailure
 */
export const QuotaFailure = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.QuotaFailure",
  () => [
    { no: 1, name: "violations", kind: "message", T: QuotaFailure_Violation, repeated: true },
  ],
);

/**
 * A message type used to describe a single quota violation.  For example, a
 * daily quota or a custom quota that was exceeded.
 *
 * @generated from message google.rpc.QuotaFailure.Violation
 */
export const QuotaFailure_Violation = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.QuotaFailure.Violation",
  () => [
    { no: 1, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "api_service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "quota_metric", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "quota_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "quota_dimensions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "quota_value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "future_quota_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ],
  {localName: "QuotaFailure_Violation"},
);

/**
 * Describes what preconditions have failed.
 *
 * For example, if an RPC failed because it required the Terms of Service to be
 * acknowledged, it could list the terms of service violation in the
 * PreconditionFailure message.
 *
 * @generated from message google.rpc.PreconditionFailure
 */
export const PreconditionFailure = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.PreconditionFailure",
  () => [
    { no: 1, name: "violations", kind: "message", T: PreconditionFailure_Violation, repeated: true },
  ],
);

/**
 * A message type used to describe a single precondition failure.
 *
 * @generated from message google.rpc.PreconditionFailure.Violation
 */
export const PreconditionFailure_Violation = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.PreconditionFailure.Violation",
  () => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "PreconditionFailure_Violation"},
);

/**
 * Describes violations in a client request. This error type focuses on the
 * syntactic aspects of the request.
 *
 * @generated from message google.rpc.BadRequest
 */
export const BadRequest = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.BadRequest",
  () => [
    { no: 1, name: "field_violations", kind: "message", T: BadRequest_FieldViolation, repeated: true },
  ],
);

/**
 * A message type used to describe a single bad request field.
 *
 * @generated from message google.rpc.BadRequest.FieldViolation
 */
export const BadRequest_FieldViolation = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.BadRequest.FieldViolation",
  () => [
    { no: 1, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "localized_message", kind: "message", T: LocalizedMessage },
  ],
  {localName: "BadRequest_FieldViolation"},
);

/**
 * Contains metadata about the request that clients can attach when filing a bug
 * or providing other forms of feedback.
 *
 * @generated from message google.rpc.RequestInfo
 */
export const RequestInfo = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.RequestInfo",
  () => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serving_data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Describes the resource that is being accessed.
 *
 * @generated from message google.rpc.ResourceInfo
 */
export const ResourceInfo = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.ResourceInfo",
  () => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Provides links to documentation or for performing an out of band action.
 *
 * For example, if a quota check failed with an error indicating the calling
 * project hasn't enabled the accessed service, this can contain a URL pointing
 * directly to the right place in the developer console to flip the bit.
 *
 * @generated from message google.rpc.Help
 */
export const Help = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.Help",
  () => [
    { no: 1, name: "links", kind: "message", T: Help_Link, repeated: true },
  ],
);

/**
 * Describes a URL link.
 *
 * @generated from message google.rpc.Help.Link
 */
export const Help_Link = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.Help.Link",
  () => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "Help_Link"},
);

/**
 * Provides a localized error message that is safe to return to the user
 * which can be attached to an RPC error.
 *
 * @generated from message google.rpc.LocalizedMessage
 */
export const LocalizedMessage = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.LocalizedMessage",
  () => [
    { no: 1, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

