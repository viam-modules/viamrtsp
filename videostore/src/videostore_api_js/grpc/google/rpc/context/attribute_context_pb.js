// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0
// @generated from file google/rpc/context/attribute_context.proto (package google.rpc.context, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Any, Duration, proto3, Struct, Timestamp } from "@bufbuild/protobuf";

/**
 * This message defines the standard attribute vocabulary for Google APIs.
 *
 * An attribute is a piece of metadata that describes an activity on a network
 * service. For example, the size of an HTTP request, or the status code of
 * an HTTP response.
 *
 * Each attribute has a type and a name, which is logically defined as
 * a proto message field in `AttributeContext`. The field type becomes the
 * attribute type, and the field path becomes the attribute name. For example,
 * the attribute `source.ip` maps to field `AttributeContext.source.ip`.
 *
 * This message definition is guaranteed not to have any wire breaking change.
 * So you can use it directly for passing attributes across different systems.
 *
 * NOTE: Different system may generate different subset of attributes. Please
 * verify the system specification before relying on an attribute generated
 * a system.
 *
 * @generated from message google.rpc.context.AttributeContext
 */
export const AttributeContext = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext",
  () => [
    { no: 7, name: "origin", kind: "message", T: AttributeContext_Peer },
    { no: 1, name: "source", kind: "message", T: AttributeContext_Peer },
    { no: 2, name: "destination", kind: "message", T: AttributeContext_Peer },
    { no: 3, name: "request", kind: "message", T: AttributeContext_Request },
    { no: 4, name: "response", kind: "message", T: AttributeContext_Response },
    { no: 5, name: "resource", kind: "message", T: AttributeContext_Resource },
    { no: 6, name: "api", kind: "message", T: AttributeContext_Api },
    { no: 8, name: "extensions", kind: "message", T: Any, repeated: true },
  ],
);

/**
 * This message defines attributes for a node that handles a network request.
 * The node can be either a service or an application that sends, forwards,
 * or receives the request. Service peers should fill in
 * `principal` and `labels` as appropriate.
 *
 * @generated from message google.rpc.context.AttributeContext.Peer
 */
export const AttributeContext_Peer = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Peer",
  () => [
    { no: 1, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "region_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "AttributeContext_Peer"},
);

/**
 * This message defines attributes associated with API operations, such as
 * a network API request. The terminology is based on the conventions used
 * by Google APIs, Istio, and OpenAPI.
 *
 * @generated from message google.rpc.context.AttributeContext.Api
 */
export const AttributeContext_Api = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Api",
  () => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "AttributeContext_Api"},
);

/**
 * This message defines request authentication attributes. Terminology is
 * based on the JSON Web Token (JWT) standard, but the terms also
 * correlate to concepts in other standards.
 *
 * @generated from message google.rpc.context.AttributeContext.Auth
 */
export const AttributeContext_Auth = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Auth",
  () => [
    { no: 1, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "audiences", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "presenter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "claims", kind: "message", T: Struct },
    { no: 5, name: "access_levels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
  {localName: "AttributeContext_Auth"},
);

/**
 * This message defines attributes for an HTTP request. If the actual
 * request is not an HTTP request, the runtime system should try to map
 * the actual request to an equivalent HTTP request.
 *
 * @generated from message google.rpc.context.AttributeContext.Request
 */
export const AttributeContext_Request = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Request",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "scheme", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "time", kind: "message", T: Timestamp },
    { no: 10, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "protocol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "auth", kind: "message", T: AttributeContext_Auth },
  ],
  {localName: "AttributeContext_Request"},
);

/**
 * This message defines attributes for a typical network response. It
 * generally models semantics of an HTTP response.
 *
 * @generated from message google.rpc.context.AttributeContext.Response
 */
export const AttributeContext_Response = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Response",
  () => [
    { no: 1, name: "code", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "headers", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "time", kind: "message", T: Timestamp },
    { no: 5, name: "backend_latency", kind: "message", T: Duration },
  ],
  {localName: "AttributeContext_Response"},
);

/**
 * This message defines core attributes for a resource. A resource is an
 * addressable (named) entity provided by the destination service. For
 * example, a file stored on a network storage service.
 *
 * @generated from message google.rpc.context.AttributeContext.Resource
 */
export const AttributeContext_Resource = /*@__PURE__*/ proto3.makeMessageType(
  "google.rpc.context.AttributeContext.Resource",
  () => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "create_time", kind: "message", T: Timestamp },
    { no: 9, name: "update_time", kind: "message", T: Timestamp },
    { no: 10, name: "delete_time", kind: "message", T: Timestamp },
    { no: 11, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
  {localName: "AttributeContext_Resource"},
);

