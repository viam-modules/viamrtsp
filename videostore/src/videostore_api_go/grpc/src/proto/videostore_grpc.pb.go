// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: src/proto/videostore.proto

package videostore_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideostoreService_Fetch_FullMethodName = "/viammodules.service.videostore.v1.videostoreService/Fetch"
	VideostoreService_Save_FullMethodName  = "/viammodules.service.videostore.v1.videostoreService/Save"
)

// VideostoreServiceClient is the client API for VideostoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideostoreServiceClient interface {
	// rpc FetchStream(FetchStreamRequest) returns (stream FetchStreamResponse);
	// Unary fetch between [from, to]
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	// Unary save between [from, to]
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
}

type videostoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideostoreServiceClient(cc grpc.ClientConnInterface) VideostoreServiceClient {
	return &videostoreServiceClient{cc}
}

func (c *videostoreServiceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, VideostoreService_Fetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videostoreServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, VideostoreService_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideostoreServiceServer is the server API for VideostoreService service.
// All implementations must embed UnimplementedVideostoreServiceServer
// for forward compatibility.
type VideostoreServiceServer interface {
	// rpc FetchStream(FetchStreamRequest) returns (stream FetchStreamResponse);
	// Unary fetch between [from, to]
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	// Unary save between [from, to]
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	mustEmbedUnimplementedVideostoreServiceServer()
}

// UnimplementedVideostoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideostoreServiceServer struct{}

func (UnimplementedVideostoreServiceServer) Fetch(context.Context, *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedVideostoreServiceServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedVideostoreServiceServer) mustEmbedUnimplementedVideostoreServiceServer() {}
func (UnimplementedVideostoreServiceServer) testEmbeddedByValue()                           {}

// UnsafeVideostoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideostoreServiceServer will
// result in compilation errors.
type UnsafeVideostoreServiceServer interface {
	mustEmbedUnimplementedVideostoreServiceServer()
}

func RegisterVideostoreServiceServer(s grpc.ServiceRegistrar, srv VideostoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideostoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideostoreService_ServiceDesc, srv)
}

func _VideostoreService_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideostoreServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideostoreService_Fetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideostoreServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideostoreService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideostoreServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideostoreService_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideostoreServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideostoreService_ServiceDesc is the grpc.ServiceDesc for VideostoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideostoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viammodules.service.videostore.v1.videostoreService",
	HandlerType: (*VideostoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _VideostoreService_Fetch_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _VideostoreService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/videostore.proto",
}
