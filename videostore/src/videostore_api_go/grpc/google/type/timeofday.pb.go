// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: google/type/timeofday.proto

package timeofday

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a time of day. The date and time zone are either not significant
// or are specified elsewhere. An API may choose to allow leap seconds. Related
// types are [google.type.Date][google.type.Date] and
// `google.protobuf.Timestamp`.
type TimeOfDay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
	// to allow the value "24:00:00" for scenarios like business closing time.
	Hours int32 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may
	// allow the value 60 if it allows leap-seconds.
	Seconds int32 `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos         int32 `protobuf:"varint,4,opt,name=nanos,proto3" json:"nanos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeOfDay) Reset() {
	*x = TimeOfDay{}
	mi := &file_google_type_timeofday_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfDay) ProtoMessage() {}

func (x *TimeOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_google_type_timeofday_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOfDay.ProtoReflect.Descriptor instead.
func (*TimeOfDay) Descriptor() ([]byte, []int) {
	return file_google_type_timeofday_proto_rawDescGZIP(), []int{0}
}

func (x *TimeOfDay) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *TimeOfDay) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *TimeOfDay) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *TimeOfDay) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

var File_google_type_timeofday_proto protoreflect.FileDescriptor

const file_google_type_timeofday_proto_rawDesc = "" +
	"\n" +
	"\x1bgoogle/type/timeofday.proto\x12\vgoogle.type\"k\n" +
	"\tTimeOfDay\x12\x14\n" +
	"\x05hours\x18\x01 \x01(\x05R\x05hours\x12\x18\n" +
	"\aminutes\x18\x02 \x01(\x05R\aminutes\x12\x18\n" +
	"\aseconds\x18\x03 \x01(\x05R\aseconds\x12\x14\n" +
	"\x05nanos\x18\x04 \x01(\x05R\x05nanosBl\n" +
	"\x0fcom.google.typeB\x0eTimeOfDayProtoP\x01Z>google.golang.org/genproto/googleapis/type/timeofday;timeofday\xf8\x01\x01\xa2\x02\x03GTPb\x06proto3"

var (
	file_google_type_timeofday_proto_rawDescOnce sync.Once
	file_google_type_timeofday_proto_rawDescData []byte
)

func file_google_type_timeofday_proto_rawDescGZIP() []byte {
	file_google_type_timeofday_proto_rawDescOnce.Do(func() {
		file_google_type_timeofday_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_type_timeofday_proto_rawDesc), len(file_google_type_timeofday_proto_rawDesc)))
	})
	return file_google_type_timeofday_proto_rawDescData
}

var file_google_type_timeofday_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_type_timeofday_proto_goTypes = []any{
	(*TimeOfDay)(nil), // 0: google.type.TimeOfDay
}
var file_google_type_timeofday_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_type_timeofday_proto_init() }
func file_google_type_timeofday_proto_init() {
	if File_google_type_timeofday_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_type_timeofday_proto_rawDesc), len(file_google_type_timeofday_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_type_timeofday_proto_goTypes,
		DependencyIndexes: file_google_type_timeofday_proto_depIdxs,
		MessageInfos:      file_google_type_timeofday_proto_msgTypes,
	}.Build()
	File_google_type_timeofday_proto = out.File
	file_google_type_timeofday_proto_goTypes = nil
	file_google_type_timeofday_proto_depIdxs = nil
}
